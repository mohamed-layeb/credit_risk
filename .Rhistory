grid.arrange(y_hist, y_box, y_violin, nrow = 3, ncol = 1, heights = c(2, 1, 1))
#stacked_vars <-
house_data0%>%
ggplot(aes(x = grade, fill = yr_renovated)) +
geom_bar(position = "fill") +
scale_fill_brewer(palette = "Paired") +
xlab("") + ylab("Proportion") +
theme(legend.position = "top", axis.text = element_text(size = 8)) +
ggtitle("(b)")
#stacked_vars <-
house_data0%>%
ggplot(aes(x = condition, fill = yr_renovated)) +
geom_bar(position = "fill") +
scale_fill_brewer(palette = "Paired") +
xlab("") + ylab("Proportion") +
theme(legend.position = "top", axis.text = element_text(size = 8)) +
ggtitle("(b)")
house_data0%>%
ggplot(aes(price, fill=condition))+
geom_boxplot()+
scale_x_log10()+
facet_wrap(house_data0$view)
house_data0%>%
ggplot(aes(y=price, x= waterfront))+
geom_boxplot()
house_data0 %>%
ggplot(aes(price, y=sqft_above, col= yr_renovated , size=sqft_basement))+
geom_point(alpha=0.3)+
geom_smooth(method = loess)+
scale_x_log10()+
facet_wrap(~ condition)
house_data0 %>%
ggplot(aes(price, y=sqft_above, col= yr_renovated ))+
geom_point(alpha=0.3)+
geom_smooth(method = loess)+
scale_x_log10()+
facet_wrap(~ condition)
averageCharges
dd_tab <- table(averageCharges$smoker, averageCharges$obese, dnn = c("Smoker", "Obese"))
dd_tab
# Formatting for slightly better printing
plot_tab <- dd_tab
dimnames(plot_tab)[[1]][1] <- "No"
dimnames(plot_tab)[[2]] <- gsub("_", " ", dimnames(plot_tab)[[2]])
dimnames(plot_tab)[[2]][1] <- "No"
dimnames(plot_tab)[[2]][2] <- "Yes"
plot_tab
mosaic(
t(plot_tab),
highlighting = TRUE,
highlighting_fill = rainbow_hcl,
margins = unit(c(6, 1, 1, 8), "lines"),
labeling = labeling_border(
rot_labels = c(90, 0, 0, 0),
just_labels = c("left", "right",
"center",  "right"),
offset_varnames = unit(c(3, 1, 1, 4), "lines")
),
keep_aspect_ratio = FALSE
)
library(graphics)
mosaic(
t(plot_tab),
highlighting = TRUE,
highlighting_fill = rainbow_hcl,
margins = unit(c(6, 1, 1, 8), "lines"),
labeling = labeling_border(
rot_labels = c(90, 0, 0, 0),
just_labels = c("left", "right",
"center",  "right"),
offset_varnames = unit(c(3, 1, 1, 4), "lines")
),
keep_aspect_ratio = FALSE
)
library(graphics)
mosaic(
t(plot_tab),
highlighting = TRUE,
highlighting_fill = rainbow_hcl,
margins = unit(c(6, 1, 1, 8), "lines"),
labeling = labeling_border(
rot_labels = c(90, 0, 0, 0),
just_labels = c("left", "right",
"center",  "right"),
offset_varnames = unit(c(3, 1, 1, 4), "lines")
),
keep_aspect_ratio = FALSE
)
library(gridExtra)
library(mgcv)
library(scales)
library(FactoMineR)
library(vcd)
library(colorspace)
mosaic(
t(plot_tab),
highlighting = TRUE,
highlighting_fill = rainbow_hcl,
margins = unit(c(6, 1, 1, 8), "lines"),
labeling = labeling_border(
rot_labels = c(90, 0, 0, 0),
just_labels = c("left", "right",
"center",  "right"),
offset_varnames = unit(c(3, 1, 1, 4), "lines")
),
keep_aspect_ratio = FALSE
)
averageCharges
insurance$obese <- as.factor(insurance$obese)
insurance$smoker <- as.factor(insurance$smoker)
insurance$sex <- as.factor(insurance$sex)
insurance$region <- as.factor(insurance$region)
View(insurance)
dd_tab <- table(insurance$smoker, insurance$obese, dnn = c("Smoker", "Obese"))
dd_tab
# Formatting for slightly better printing
plot_tab <- dd_tab
dimnames(plot_tab)[[1]][1] <- "No"
dimnames(plot_tab)[[2]] <- gsub("_", " ", dimnames(plot_tab)[[2]])
dimnames(plot_tab)[[2]][1] <- "No"
dimnames(plot_tab)[[2]][2] <- "Yes"
plot_tab
mosaic(
t(plot_tab),
highlighting = TRUE,
highlighting_fill = rainbow_hcl,
margins = unit(c(6, 1, 1, 8), "lines"),
labeling = labeling_border(
rot_labels = c(90, 0, 0, 0),
just_labels = c("left", "right",
"center",  "right"),
offset_varnames = unit(c(3, 1, 1, 4), "lines")
),
keep_aspect_ratio = FALSE
)
mosaic(
t(plot_tab),
highlighting = TRUE,
highlighting_fill = rainbow_hcl,
margins = unit(c(6, 1), "lines"),
labeling = labeling_border(
rot_labels = c(90, 0),
just_labels = c("left", "right",
"center",  "right"),
offset_varnames = unit(c(3, 1), "lines")
),
keep_aspect_ratio = FALSE
)
mosaic(
t(plot_tab),
highlighting = TRUE,
highlighting_fill = rainbow_hcl,
margins = unit(c(6, 1, 1, 8), "lines"),
labeling = labeling_border(
rot_labels = c(90, 0, 0, 0),
just_labels = c("left", "right",
"center",  "right"),
offset_varnames = unit(c(3, 1, 1, 4), "lines")
),
keep_aspect_ratio = FALSE
)
attach(insurance)
mosaic_examp <- ggplot(data = insurance) +
geom_mosaic(aes(product(smoker, obese), fill = smoker)) +
labs(y="Smoker", x="Obese", title = "Mosaic Plot (2 variables)")
library(tidyverse) #used for data transformations
library(ggplot2)
mosaic_examp <- ggplot(data = insurance) +
geom_mosaic(aes(product(smoker, obese), fill = smoker)) +
labs(y="Smoker", x="Obese", title = "Mosaic Plot (2 variables)")
devtools::install_github("haleyjeppson/ggmosaic")
library(ggmosaic)
mosaic_examp <- ggplot(data = insurance) +
geom_mosaic(aes(product(smoker, obese), fill = smoker)) +
labs(y="Smoker", x="Obese", title = "Mosaic Plot (2 variables)")
mosaic_examp
averageCharges
library(tidyverse)
library(tidymodels)
attendance <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/attendance.csv')
standings <- read_csv('http://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/standings.csv')
attendance_joint <- attendance %>%
left_join(standings, by = c("year", "team_name", "team"))
atten_df <- attendance_joint%>%
filter(!is.na(weekly_attendance))%>%
select(weekly_attendance, team_name, week, year,
margin_of_victory, strength_of_schedule, playoffs)
set.seed(1234)
attend_split <- atten_df%>%
initial_split(strata = playoffs)
attend_split
nfl_train <- training(attend_split)
nfl_test <- testing(attend_split)
nfl_train
lm_spec <- linear_reg()%>%
set_engine(engine = "lm")
lm_fit <- lm_spec %>%
fit(weekly_attendance~. ,
data = nfl_train)
tidy(lm_fit)%>% arrange(-estimate)
result_train <- lm_fit %>%
predict(new_data= nfl_train)%>%
mutate(truth = nfl_train$weekly_attendance,
model = "lm")
result_train
result_test <- lm_fit %>%
predict(new_data= nfl_test)%>%
mutate(truth = nfl_test$weekly_attendance,
model = "lm")
result_test
result_train%>%
group_by(model)%>%
rmse(truth = truth , estimate = .pred)
result_test%>%
group_by(model)%>%
rmse(truth = truth , estimate = .pred)
result_test %>%
mutate(train = "testing") %>%
bind_rows(result_train %>%
mutate(train = "training")) %>%
ggplot(aes(truth , .pred , color = model))+
geom_abline(lty = 2, color ="gray80", size = 1.5)+
geom_point(alpha = 0.5 )+
facet_wrap(~ train)
set.seed(1234)
nfl_folds <- vfold_cv(nfl_train, strata =  playoffs)
nfl_folds
rf_res <- fit_resamples(
lm_spec,
weekly_attendance ~. ,
nfl_folds,
control = control_resamples(save_pred = TRUE))
rf_res%>%
collect_metrics()
rf_res%>%
unnest(.predictions)%>%
ggplot(aes(weekly_attendance, .pred, color = id))+
geom_abline (lty = 2, color ="gray80", size = 1.5)+
geom_point(alpha = 0.5 )
house_data <- read_excel("C:/Users/Mouhamed/Desktop/Projet ML/kc_house_data.xlsx")
library(readxl)
house_data <- read_excel("C:/Users/Mouhamed/Desktop/Projet ML/kc_house_data.xlsx")
house_data$bathrooms <- floor(house_data$bathrooms)
house_data$floors <- floor(house_data$floors)
house_data$yr_renovated <- ifelse(house_data$yr_renovated == 0,0, 1)
house_data0 <- house_data%>%
filter(price<1100000, bathrooms <5, bedrooms < 6)%>%
select(-id, -date, -yr_built, -zipcode, -sqft_lot, -sqft_lot15, -lat, -long, - grade, - sqft_basement)%>%
mutate_at(vars(bedrooms, bathrooms, floors, waterfront, view, condition, yr_renovated), as.factor)
house_data0$view <- factor(house_data0$view, labels = c("very bad" ,"bad" , "meduim ","good" ,"very good"))
house_data0$condition <- factor(house_data0$condition, labels = c("very bad" ,"bad" , "meduim ","good" ,"very good"))
set.seed(1234)
uni_split <- house_data0%>%
#mutate(price = log(price))%>%
#mutate(sqft_living = log(sqft_living))%>%
#mutate(sqft_lot = log(sqft_lot))%>%
# mutate(sqft_lot15 = log(sqft_lot15))%>%
#  mutate(sqft_above = log(sqft_above))%>%
initial_split(strata =price)
uni_train <- training(uni_split)
uni_test <- testing(uni_split)
uni_split
uni_rec <- recipe(price ~ . , data = uni_train)%>%
step_dummy(all_nominal_predictors())%>%
step_impute_median(sqft_above)%>%
step_zv(all_predictors())%>%
step_normalize(all_numeric())%>%
step_corr(all_predictors())%>%
prep()
st <- bake(uni_rec, new_data = uni_train)
bake(uni_rec, new_data = uni_train)
uni_rec
projet_wf <-workflow()%>%
add_recipe(uni_rec)
projet_wf
## Train Logistic Regression :
lm_spec <- linear_reg() %>%
set_engine("lm")
## Train Support Vector Machines :
library(kernlab)
svm_spec <- svm_rbf(cost = 0.5)%>%
set_engine("kernlab")%>%
set_mode("regression")
## Train Random Forest :
library(ranger)
rf_spec <- rand_forest(trees = 5000)%>%
set_engine("ranger")%>%
set_mode("regression")
## Train a decision tree :
library(rpart)
tree_spec <- decision_tree()%>%
set_engine("rpart")%>%
set_mode("regression")
## Train a bossting tree
library(xgboost)
bos_spec<- boost_tree()%>%
set_engine("xgboost")%>%
set_mode("regression")
## Train a Bagginf Tree
library(baguette)
bag_spec <- bag_tree()%>%
set_engine("rpart", times = 50)%>%
set_mode("regression")
## Model evaluation with resampling :
set.seed(123)
folds <- vfold_cv(uni_train, strata = price)
folds
#1: Logistic Reg:
set.seed(1234)
lm_rs <- projet_wf %>%
add_model(lm_spec)%>%
fit_resamples(
resamples = folds,
control = control_resamples(save_pred = TRUE)
)
lm_res <- fit_resamples(
lm_spec,
uni_rec ,
folds,
control = control_resamples(save_pred = TRUE))
folds
folds%>%
unnest()
folds%>%
unnest(splits)
result_test
result_train%>%
group_by(model)%>%
rmse(truth = truth , estimate = .pred)
tuition_cost <- read_csv('http://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')
diversity_raw <- read_csv('http://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/diversity_school.csv')
diversity_school <- diversity_raw%>%
filter(category== "Total Minority")%>%
mutate(total_minority = enrollment/ total_enrollment)
university_df <- diversity_school %>% transmute(diversity = case_when(total_minority > 0.3 ~ "high",
TRUE ~ "low"),
name, state,
total_enrollment)%>%
inner_join(tuition_cost %>%
select(name, type, degree_length,
in_state_tuition: out_of_state_total))%>%
left_join(tibble(state = state.name, region = state.region))%>%
select(-state , -name)%>%
mutate_if(is.character, factor)
set.seed(1234)
uni_split <- initial_split(university_df, strata = diversity)
uni_train <- training(uni_split)
uni_test <- testing(uni_split)
uni_split
uni_train
uni_rec <- recipe(diversity ~ . , data = uni_train)%>%
step_corr(all_numeric())%>%
step_dummy(all_nominal(), -all_outcomes())%>%
step_zv(all_numeric())%>%
step_normalize(all_numeric()) %>%
prep()
glm_spec <- logistic_reg()%>%
set_engine("glm")
glm_fit <- glm_spec %>%
fit(diversity ~ ., data= juice(uni_rec))
glm_fit
library(kknn)
knn_spec <- nearest_neighbor()%>%
set_engine("kknn")%>%
set_mode("classification")
knn_fit <- knn_spec %>%
fit(diversity ~ ., data= juice(uni_rec))
knn_fit
library(rpart)
tree_spec <- decision_tree()%>%
set_engine("rpart")%>%
set_mode("classification")
tree_fit <- tree_spec %>%
fit(diversity ~ ., data= juice(uni_rec))
tree_fit
set.seed(123)
folds <- vfold_cv(juice(uni_rec), strata = diversity)
set.seed(234)
glm_rs <- glm_spec%>%
fit_resamples(diversity ~ ., folds,
metrics = metric_set(roc_auc, sens, spec, accuracy),
control = control_resamples(save_pred = TRUE))
glm_rs%>% unnest(.metrics)
glm_rs%>% unnest(.predictions)
set.seed(234)
knn_rs <- knn_spec%>%
fit_resamples(diversity ~ ., folds,
metrics = metric_set(roc_auc, sens, spec, accuracy),
control = control_resamples(save_pred = TRUE))
knn_rs%>% unnest(.metrics)
knn_rs%>% unnest(.predictions)
set.seed(234)
tree_rs <- tree_spec%>%
fit_resamples(diversity ~ ., folds,
metrics = metric_set(roc_auc, sens, spec, accuracy),
control = control_resamples(save_pred = TRUE))
tree_rs%>% unnest(.metrics)
tree_rs%>% unnest(.predictions)
tree_rs%>% collect_metrics()
knn_rs%>% collect_metrics()
glm_rs%>% collect_metrics()
glm_rs%>%
unnest(.predictions) %>%
mutate(model= "glm") %>%
bind_rows(tree_rs%>%
unnest(.predictions)%>%
mutate(model= "tree"))%>%
bind_rows(knn_rs%>%
unnest(.predictions)%>%
mutate(model= "knn"))%>%
group_by(model)%>%
roc_curve(diversity, .pred_high)%>%
autoplot()
glm_fit %>%
predict(new_data = bake(uni_rec, new_data = uni_test),
type = "prob")%>%
mutate(truth = uni_test$diversity)%>%
roc_auc(truth, .pred_high)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidymodels)
library(skimr)
library(haven)
library(gridExtra)
library(GGally)
library(themis)
library(dlookr)
install.packages("dlookr")
library(readr)
library(tidymodels)
library(skimr)
library(haven)
library(gridExtra)
library(GGally)
library(themis)
library(dlookr)
install.packages("dlookr")
library(readr)
library(tidymodels)
library(skimr)
library(haven)
library(gridExtra)
library(GGally)
library(themis)
library(dlookr)
install.packages("C:/Users/Mouhamed/Desktop/dlookr_0.5.6.tar.gz", repos = NULL, type = "source")
library(readr)
library(tidymodels)
library(skimr)
library(haven)
library(gridExtra)
library(GGally)
library(themis)
library(dlookr)
install.packages("zeallot")
install.packages("dlookr")
install.packages("Rcpp")
install.packages("C:/Users/Mouhamed/AppData/Local/Temp/Rtmp27Sb08/downloaded_packages/Rcpp_1.0.8.3.zip", repos = NULL, type = "win.binary")
install.packages("Rcpp")
library(readr)
library(dplyr)
library(caret)
credit_risk_dataset <- read.csv("C:/Users/Mouhamed/Desktop/credit_risk_dataset.csv")
credit_risk_dataset <- read.csv("C:/Users/Mouhamed/Desktop/Projet ML/Web App/credit_risk_dataset.csv")
credit0 <- credit_risk_dataset %>%
na.omit()%>%
filter(person_age<75, person_income<150000,
person_emp_length<25, loan_amnt<25000,
cb_person_cred_hist_length< 20,person_home_ownership != 'OTHER')%>%
mutate(loan_status = as.factor(loan_status))%>%
mutate_if(is.character, as.factor)
set.seed(10000)
fitControl = trainControl(method = "cv", number = 3)
glm_model = train(loan_status~.,
data = credit0,
method="glm",
trControl=fitControl)
glm_model
saveRDS(glm_model, "credit_scoring_glm_model.rds")
new_data = data.frame(
"person_age" =20,
"person_income" = 500000000,
"person_home_ownership" = "RENT",
"person_emp_length" =5,
"loan_intent" = "PERSONAL",
"loan_grade"= "D",
"loan_amnt" = 40000,
"loan_int_rate" = 17,
"loan_percent_income" = 0.6,
"cb_person_default_on_file" = "Y",
"cb_person_cred_hist_length" = 5
)
new_data
pred = predict(glm_model, newdata = new_data, type = "prob")
pred
library(shiny)
library(shinydashboard)
runApp('C:/Users/Mouhamed/Desktop/Projet ML/Web App/App/webapp.R')
runApp('C:/Users/Mouhamed/Desktop/Projet ML/Web App/App/webapp.R')
credit_risk_dataset <- read.csv("credit_risk_dataset.csv")
credit_risk_dataset <- read.csv("credit_risk_dataset.csv")
runApp('C:/Users/Mouhamed/Desktop/Projet ML/Web App/App/webapp.R')
runApp('C:/Users/Mouhamed/Desktop/Projet ML/Web App/App/webapp.R')
library(shiny); runApp('webapp.R')
setwd("~/")
runApp('webapp.R')
setwd("C:/Users/Mouhamed/Desktop/Projet ML/Web App/App")
library(readr)
library(dplyr)
library(caret)
credit_risk_dataset <- read.csv("credit_risk_dataset.csv")
runApp('webapp.R')
